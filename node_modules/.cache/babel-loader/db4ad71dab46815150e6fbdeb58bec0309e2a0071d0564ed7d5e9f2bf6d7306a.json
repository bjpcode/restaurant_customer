{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useMemo } from 'react';\nimport { submitOrder, getOrdersBySession } from '../services/supabase';\nimport { subscribeToOrderUpdates } from '../services/supabase';\nconst ORDER_STATUS_LABELS = {\n  pending: 'Order Placed',\n  confirmed: 'Confirmed',\n  preparing: 'Preparing',\n  ready: 'Ready',\n  delivered: 'Delivered',\n  cancelled: 'Cancelled'\n};\nconst ORDER_STATUS_COLORS = {\n  pending: '#ffc107',\n  confirmed: '#17a2b8',\n  preparing: '#fd7e14',\n  ready: '#28a745',\n  delivered: '#6c757d',\n  cancelled: '#dc3545'\n};\nconst useOrders = sessionId => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [submittingOrder, setSubmittingOrder] = useState(false);\n\n  // Fetch orders for current session\n  const fetchOrders = useCallback(async () => {\n    if (!sessionId) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getOrdersBySession(sessionId);\n      setOrders(data || []);\n    } catch (err) {\n      console.error('Error fetching orders:', err);\n      setError(err.message || 'Failed to load orders');\n    } finally {\n      setLoading(false);\n    }\n  }, [sessionId]);\n\n  // Submit new order\n  const submitNewOrder = useCallback(async orderData => {\n    try {\n      setSubmittingOrder(true);\n      setError(null);\n      const newOrder = await submitOrder({\n        ...orderData,\n        session_id: sessionId,\n        created_at: new Date().toISOString()\n      });\n\n      // Add the new order to the state\n      setOrders(prev => [newOrder, ...prev]);\n      return newOrder;\n    } catch (err) {\n      console.error('Error submitting order:', err);\n      setError(err.message || 'Failed to submit order');\n      throw err;\n    } finally {\n      setSubmittingOrder(false);\n    }\n  }, [sessionId]);\n\n  // Get order by ID\n  const getOrder = useCallback(orderId => {\n    return orders.find(order => order.id === orderId);\n  }, [orders]);\n\n  // Get orders by status\n  const getOrdersByStatus = useCallback(status => {\n    return orders.filter(order => order.status === status);\n  }, [orders]);\n\n  // Calculate order statistics\n  const orderStats = useMemo(() => {\n    const stats = {\n      total: orders.length,\n      totalAmount: orders.reduce((sum, order) => sum + order.total_amount, 0),\n      statusCounts: {},\n      averageOrderValue: 0,\n      recentOrders: orders.slice(0, 5)\n    };\n\n    // Count orders by status\n    Object.keys(ORDER_STATUS_LABELS).forEach(status => {\n      stats.statusCounts[status] = orders.filter(order => order.status === status).length;\n    });\n\n    // Calculate average order value\n    if (orders.length > 0) {\n      stats.averageOrderValue = stats.totalAmount / orders.length;\n    }\n    return stats;\n  }, [orders]);\n\n  // Get active orders (not delivered or cancelled)\n  const activeOrders = useMemo(() => {\n    return orders.filter(order => !['delivered', 'cancelled'].includes(order.status));\n  }, [orders]);\n\n  // Get completed orders\n  const completedOrders = useMemo(() => {\n    return orders.filter(order => order.status === 'delivered');\n  }, [orders]);\n\n  // Get current order (latest active order)\n  const currentOrder = useMemo(() => {\n    return activeOrders.length > 0 ? activeOrders[0] : null;\n  }, [activeOrders]);\n\n  // Format order for display\n  const formatOrder = useCallback(order => {\n    var _order$order_items, _order$order_items2;\n    return {\n      ...order,\n      statusLabel: ORDER_STATUS_LABELS[order.status] || order.status,\n      statusColor: ORDER_STATUS_COLORS[order.status] || '#6c757d',\n      formattedAmount: `$${order.total_amount.toFixed(2)}`,\n      formattedDate: new Date(order.created_at).toLocaleDateString(),\n      formattedTime: new Date(order.created_at).toLocaleTimeString(),\n      itemCount: ((_order$order_items = order.order_items) === null || _order$order_items === void 0 ? void 0 : _order$order_items.length) || 0,\n      totalItems: ((_order$order_items2 = order.order_items) === null || _order$order_items2 === void 0 ? void 0 : _order$order_items2.reduce((sum, item) => sum + item.quantity, 0)) || 0\n    };\n  }, []);\n\n  // Check if order can be reordered\n  const canReorder = useCallback(order => {\n    return order && order.order_items && order.order_items.length > 0;\n  }, []);\n\n  // Prepare reorder data\n  const prepareReorderData = useCallback(order => {\n    if (!canReorder(order)) return null;\n    return {\n      table_number: order.table_number,\n      order_items: order.order_items.map(item => ({\n        ...item,\n        special_instructions: item.special_instructions || ''\n      })),\n      total_amount: order.total_amount,\n      special_instructions: `Reorder of order #${order.id.slice(-8)}`\n    };\n  }, [canReorder]);\n\n  // Calculate estimated delivery time for active orders\n  const getEstimatedDeliveryTime = useCallback(order => {\n    if (!order || ['delivered', 'cancelled'].includes(order.status)) {\n      return null;\n    }\n    const orderTime = new Date(order.created_at);\n    const prepTime = order.estimated_prep_time || 30; // minutes\n    const estimatedDelivery = new Date(orderTime.getTime() + prepTime * 60000);\n    return {\n      estimatedTime: estimatedDelivery,\n      remainingMinutes: Math.max(0, Math.ceil((estimatedDelivery - new Date()) / 60000)),\n      isOverdue: estimatedDelivery < new Date()\n    };\n  }, []);\n\n  // Initialize orders on mount\n  useEffect(() => {\n    if (sessionId) {\n      fetchOrders();\n    }\n  }, [fetchOrders, sessionId]);\n\n  // Set up real-time subscriptions for order updates\n  useEffect(() => {\n    if (!sessionId) return;\n    const subscription = subscribeToOrderUpdates(sessionId, payload => {\n      console.log('Order update received:', payload);\n      switch (payload.eventType) {\n        case 'INSERT':\n          setOrders(prev => {\n            // Avoid duplicates\n            const exists = prev.some(order => order.id === payload.new.id);\n            if (!exists) {\n              return [payload.new, ...prev];\n            }\n            return prev;\n          });\n          break;\n        case 'UPDATE':\n          setOrders(prev => prev.map(order => order.id === payload.new.id ? payload.new : order));\n          break;\n        case 'DELETE':\n          setOrders(prev => prev.filter(order => order.id !== payload.old.id));\n          break;\n        default:\n          // Refetch on unknown changes\n          fetchOrders();\n      }\n    });\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [sessionId, fetchOrders]);\n  return {\n    // Data\n    orders,\n    activeOrders,\n    completedOrders,\n    currentOrder,\n    orderStats,\n    // State\n    loading,\n    error,\n    submittingOrder,\n    // Actions\n    submitNewOrder,\n    fetchOrders,\n    getOrder,\n    getOrdersByStatus,\n    // Utilities\n    formatOrder,\n    canReorder,\n    prepareReorderData,\n    getEstimatedDeliveryTime,\n    // Constants\n    ORDER_STATUS_LABELS,\n    ORDER_STATUS_COLORS,\n    // Computed\n    hasOrders: orders.length > 0,\n    hasActiveOrders: activeOrders.length > 0,\n    isEmpty: !loading && orders.length === 0\n  };\n};\n_s(useOrders, \"PzuHRa80HA4kP9S03izrcKrs6po=\");\nexport default useOrders;","map":{"version":3,"names":["useState","useCallback","useEffect","useMemo","submitOrder","getOrdersBySession","subscribeToOrderUpdates","ORDER_STATUS_LABELS","pending","confirmed","preparing","ready","delivered","cancelled","ORDER_STATUS_COLORS","useOrders","sessionId","_s","orders","setOrders","loading","setLoading","error","setError","submittingOrder","setSubmittingOrder","fetchOrders","data","err","console","message","submitNewOrder","orderData","newOrder","session_id","created_at","Date","toISOString","prev","getOrder","orderId","find","order","id","getOrdersByStatus","status","filter","orderStats","stats","total","length","totalAmount","reduce","sum","total_amount","statusCounts","averageOrderValue","recentOrders","slice","Object","keys","forEach","activeOrders","includes","completedOrders","currentOrder","formatOrder","_order$order_items","_order$order_items2","statusLabel","statusColor","formattedAmount","toFixed","formattedDate","toLocaleDateString","formattedTime","toLocaleTimeString","itemCount","order_items","totalItems","item","quantity","canReorder","prepareReorderData","table_number","map","special_instructions","getEstimatedDeliveryTime","orderTime","prepTime","estimated_prep_time","estimatedDelivery","getTime","estimatedTime","remainingMinutes","Math","max","ceil","isOverdue","subscription","payload","log","eventType","exists","some","new","old","unsubscribe","hasOrders","hasActiveOrders","isEmpty"],"sources":["C:/Users/baij/Desktop/Work/Business/restuarant/customer/src/hooks/useOrders.js"],"sourcesContent":["import { useState, useCallback, useEffect, useMemo } from 'react';\nimport { submitOrder, getOrdersBySession } from '../services/supabase';\nimport { subscribeToOrderUpdates } from '../services/supabase';\n\nconst ORDER_STATUS_LABELS = {\n  pending: 'Order Placed',\n  confirmed: 'Confirmed',\n  preparing: 'Preparing',\n  ready: 'Ready',\n  delivered: 'Delivered',\n  cancelled: 'Cancelled'\n};\n\nconst ORDER_STATUS_COLORS = {\n  pending: '#ffc107',\n  confirmed: '#17a2b8',\n  preparing: '#fd7e14',\n  ready: '#28a745',\n  delivered: '#6c757d',\n  cancelled: '#dc3545'\n};\n\nconst useOrders = (sessionId) => {\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [submittingOrder, setSubmittingOrder] = useState(false);\n\n  // Fetch orders for current session\n  const fetchOrders = useCallback(async () => {\n    if (!sessionId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getOrdersBySession(sessionId);\n      setOrders(data || []);\n    } catch (err) {\n      console.error('Error fetching orders:', err);\n      setError(err.message || 'Failed to load orders');\n    } finally {\n      setLoading(false);\n    }\n  }, [sessionId]);\n\n  // Submit new order\n  const submitNewOrder = useCallback(async (orderData) => {\n    try {\n      setSubmittingOrder(true);\n      setError(null);\n\n      const newOrder = await submitOrder({\n        ...orderData,\n        session_id: sessionId,\n        created_at: new Date().toISOString()\n      });\n\n      // Add the new order to the state\n      setOrders(prev => [newOrder, ...prev]);\n      \n      return newOrder;\n    } catch (err) {\n      console.error('Error submitting order:', err);\n      setError(err.message || 'Failed to submit order');\n      throw err;\n    } finally {\n      setSubmittingOrder(false);\n    }\n  }, [sessionId]);\n\n  // Get order by ID\n  const getOrder = useCallback((orderId) => {\n    return orders.find(order => order.id === orderId);\n  }, [orders]);\n\n  // Get orders by status\n  const getOrdersByStatus = useCallback((status) => {\n    return orders.filter(order => order.status === status);\n  }, [orders]);\n\n  // Calculate order statistics\n  const orderStats = useMemo(() => {\n    const stats = {\n      total: orders.length,\n      totalAmount: orders.reduce((sum, order) => sum + order.total_amount, 0),\n      statusCounts: {},\n      averageOrderValue: 0,\n      recentOrders: orders.slice(0, 5)\n    };\n\n    // Count orders by status\n    Object.keys(ORDER_STATUS_LABELS).forEach(status => {\n      stats.statusCounts[status] = orders.filter(order => order.status === status).length;\n    });\n\n    // Calculate average order value\n    if (orders.length > 0) {\n      stats.averageOrderValue = stats.totalAmount / orders.length;\n    }\n\n    return stats;\n  }, [orders]);\n\n  // Get active orders (not delivered or cancelled)\n  const activeOrders = useMemo(() => {\n    return orders.filter(order => \n      !['delivered', 'cancelled'].includes(order.status)\n    );\n  }, [orders]);\n\n  // Get completed orders\n  const completedOrders = useMemo(() => {\n    return orders.filter(order => \n      order.status === 'delivered'\n    );\n  }, [orders]);\n\n  // Get current order (latest active order)\n  const currentOrder = useMemo(() => {\n    return activeOrders.length > 0 ? activeOrders[0] : null;\n  }, [activeOrders]);\n\n  // Format order for display\n  const formatOrder = useCallback((order) => {\n    return {\n      ...order,\n      statusLabel: ORDER_STATUS_LABELS[order.status] || order.status,\n      statusColor: ORDER_STATUS_COLORS[order.status] || '#6c757d',\n      formattedAmount: `$${order.total_amount.toFixed(2)}`,\n      formattedDate: new Date(order.created_at).toLocaleDateString(),\n      formattedTime: new Date(order.created_at).toLocaleTimeString(),\n      itemCount: order.order_items?.length || 0,\n      totalItems: order.order_items?.reduce((sum, item) => sum + item.quantity, 0) || 0\n    };\n  }, []);\n\n  // Check if order can be reordered\n  const canReorder = useCallback((order) => {\n    return order && order.order_items && order.order_items.length > 0;\n  }, []);\n\n  // Prepare reorder data\n  const prepareReorderData = useCallback((order) => {\n    if (!canReorder(order)) return null;\n\n    return {\n      table_number: order.table_number,\n      order_items: order.order_items.map(item => ({\n        ...item,\n        special_instructions: item.special_instructions || ''\n      })),\n      total_amount: order.total_amount,\n      special_instructions: `Reorder of order #${order.id.slice(-8)}`\n    };\n  }, [canReorder]);\n\n  // Calculate estimated delivery time for active orders\n  const getEstimatedDeliveryTime = useCallback((order) => {\n    if (!order || ['delivered', 'cancelled'].includes(order.status)) {\n      return null;\n    }\n\n    const orderTime = new Date(order.created_at);\n    const prepTime = order.estimated_prep_time || 30; // minutes\n    const estimatedDelivery = new Date(orderTime.getTime() + prepTime * 60000);\n\n    return {\n      estimatedTime: estimatedDelivery,\n      remainingMinutes: Math.max(0, Math.ceil((estimatedDelivery - new Date()) / 60000)),\n      isOverdue: estimatedDelivery < new Date()\n    };\n  }, []);\n\n  // Initialize orders on mount\n  useEffect(() => {\n    if (sessionId) {\n      fetchOrders();\n    }\n  }, [fetchOrders, sessionId]);\n\n  // Set up real-time subscriptions for order updates\n  useEffect(() => {\n    if (!sessionId) return;\n\n    const subscription = subscribeToOrderUpdates(sessionId, (payload) => {\n      console.log('Order update received:', payload);\n\n      switch (payload.eventType) {\n        case 'INSERT':\n          setOrders(prev => {\n            // Avoid duplicates\n            const exists = prev.some(order => order.id === payload.new.id);\n            if (!exists) {\n              return [payload.new, ...prev];\n            }\n            return prev;\n          });\n          break;\n        case 'UPDATE':\n          setOrders(prev =>\n            prev.map(order =>\n              order.id === payload.new.id ? payload.new : order\n            )\n          );\n          break;\n        case 'DELETE':\n          setOrders(prev =>\n            prev.filter(order => order.id !== payload.old.id)\n          );\n          break;\n        default:\n          // Refetch on unknown changes\n          fetchOrders();\n      }\n    });\n\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [sessionId, fetchOrders]);\n\n  return {\n    // Data\n    orders,\n    activeOrders,\n    completedOrders,\n    currentOrder,\n    orderStats,\n\n    // State\n    loading,\n    error,\n    submittingOrder,\n\n    // Actions\n    submitNewOrder,\n    fetchOrders,\n    getOrder,\n    getOrdersByStatus,\n\n    // Utilities\n    formatOrder,\n    canReorder,\n    prepareReorderData,\n    getEstimatedDeliveryTime,\n\n    // Constants\n    ORDER_STATUS_LABELS,\n    ORDER_STATUS_COLORS,\n\n    // Computed\n    hasOrders: orders.length > 0,\n    hasActiveOrders: activeOrders.length > 0,\n    isEmpty: !loading && orders.length === 0\n  };\n};\n\nexport default useOrders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}