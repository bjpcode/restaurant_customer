{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nconst CART_STORAGE_KEY = 'restaurant_cart';\nconst useCart = sessionId => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedCart = localStorage.getItem(`${CART_STORAGE_KEY}_${sessionId}`);\n      if (savedCart) {\n        const parsedCart = JSON.parse(savedCart);\n        setCart(parsedCart);\n      }\n    } catch (error) {\n      console.error('Error loading cart from localStorage:', error);\n    }\n  }, [sessionId]);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(`${CART_STORAGE_KEY}_${sessionId}`, JSON.stringify(cart));\n    } catch (error) {\n      console.error('Error saving cart to localStorage:', error);\n    }\n  }, [cart, sessionId]);\n\n  // Add item to cart\n  const addToCart = useCallback((menuItem, quantity = 1, specialInstructions = '') => {\n    setCart(prevCart => {\n      const existingItemIndex = prevCart.findIndex(item => item.id === menuItem.id && item.specialInstructions === specialInstructions);\n      if (existingItemIndex >= 0) {\n        // Update existing item quantity\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + quantity\n        };\n        return updatedCart;\n      } else {\n        // Add new item\n        return [...prevCart, {\n          id: menuItem.id,\n          name: menuItem.name,\n          price: menuItem.price,\n          category: menuItem.category,\n          image_url: menuItem.image_url,\n          preparation_time: menuItem.preparation_time,\n          quantity,\n          specialInstructions,\n          cartId: `${menuItem.id}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n        }];\n      }\n    });\n  }, []);\n\n  // Update item quantity\n  const updateQuantity = useCallback((cartId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(cartId);\n      return;\n    }\n    setCart(prevCart => prevCart.map(item => item.cartId === cartId ? {\n      ...item,\n      quantity: newQuantity\n    } : item));\n  }, []);\n\n  // Remove item from cart\n  const removeFromCart = useCallback(cartId => {\n    setCart(prevCart => prevCart.filter(item => item.cartId !== cartId));\n  }, []);\n\n  // Clear entire cart\n  const clearCart = useCallback(() => {\n    setCart([]);\n  }, []);\n\n  // Update special instructions for cart item\n  const updateSpecialInstructions = useCallback((cartId, instructions) => {\n    setCart(prevCart => prevCart.map(item => item.cartId === cartId ? {\n      ...item,\n      specialInstructions: instructions\n    } : item));\n  }, []);\n\n  // Get item from cart by cartId\n  const getCartItem = useCallback(cartId => {\n    return cart.find(item => item.cartId === cartId);\n  }, [cart]);\n\n  // Check if item is in cart\n  const isInCart = useCallback(menuItemId => {\n    return cart.some(item => item.id === menuItemId);\n  }, [cart]);\n\n  // Get total quantity for a specific menu item\n  const getItemQuantity = useCallback(menuItemId => {\n    return cart.filter(item => item.id === menuItemId).reduce((total, item) => total + item.quantity, 0);\n  }, [cart]);\n\n  // Calculated values with memoization\n  const cartTotal = useMemo(() => {\n    return cart.reduce((total, item) => total + item.price * item.quantity, 0);\n  }, [cart]);\n  const cartItemCount = useMemo(() => {\n    return cart.reduce((total, item) => total + item.quantity, 0);\n  }, [cart]);\n  const cartSubtotal = useMemo(() => {\n    return cartTotal; // Same as total for now, but can be different if we add taxes/fees\n  }, [cartTotal]);\n  const estimatedPrepTime = useMemo(() => {\n    if (cart.length === 0) return 0;\n\n    // Calculate max prep time (items can be prepared in parallel)\n    const maxPrepTime = Math.max(...cart.map(item => item.preparation_time || 15));\n\n    // Add buffer time based on cart size\n    const bufferTime = Math.min(cart.length * 2, 10);\n    return maxPrepTime + bufferTime;\n  }, [cart]);\n\n  // Group cart items by category for display\n  const cartItemsByCategory = useMemo(() => {\n    const grouped = cart.reduce((acc, item) => {\n      const category = item.category || 'other';\n      if (!acc[category]) {\n        acc[category] = [];\n      }\n      acc[category].push(item);\n      return acc;\n    }, {});\n    return grouped;\n  }, [cart]);\n\n  // Validate cart items (check if all items are still available)\n  const validateCart = useCallback(async checkAvailabilityFn => {\n    if (cart.length === 0) return {\n      valid: true,\n      unavailableItems: []\n    };\n    try {\n      setIsLoading(true);\n      const menuItemIds = [...new Set(cart.map(item => item.id))];\n      const availability = await checkAvailabilityFn(menuItemIds);\n      if (!availability.allAvailable) {\n        const unavailableItems = cart.filter(item => availability.unavailableItems.includes(item.id));\n\n        // Remove unavailable items from cart\n        setCart(prevCart => prevCart.filter(item => !availability.unavailableItems.includes(item.id)));\n        return {\n          valid: false,\n          unavailableItems\n        };\n      }\n      return {\n        valid: true,\n        unavailableItems: []\n      };\n    } catch (error) {\n      console.error('Error validating cart:', error);\n      return {\n        valid: false,\n        error: error.message\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [cart]);\n\n  // Prepare order data for submission\n  const prepareOrderData = useCallback((tableNumber, sessionId, additionalData = {}) => {\n    return {\n      table_number: tableNumber,\n      session_id: sessionId,\n      order_items: cart.map(item => ({\n        menu_item_id: item.id,\n        name: item.name,\n        price: item.price,\n        quantity: item.quantity,\n        special_instructions: item.specialInstructions || ''\n      })),\n      total_amount: cartTotal,\n      estimated_prep_time: estimatedPrepTime,\n      status: 'pending',\n      ...additionalData\n    };\n  }, [cart, cartTotal, estimatedPrepTime]);\n  return {\n    // State\n    cart,\n    isLoading,\n    // Actions\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    updateSpecialInstructions,\n    // Getters\n    getCartItem,\n    isInCart,\n    getItemQuantity,\n    // Calculated values\n    cartTotal,\n    cartItemCount,\n    cartSubtotal,\n    estimatedPrepTime,\n    cartItemsByCategory,\n    // Utilities\n    validateCart,\n    prepareOrderData\n  };\n};\n_s(useCart, \"JhJbx/nc3nqIO5qVhE+/09azMAI=\");\nexport default useCart;","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","CART_STORAGE_KEY","useCart","sessionId","_s","cart","setCart","isLoading","setIsLoading","savedCart","localStorage","getItem","parsedCart","JSON","parse","error","console","setItem","stringify","addToCart","menuItem","quantity","specialInstructions","prevCart","existingItemIndex","findIndex","item","id","updatedCart","name","price","category","image_url","preparation_time","cartId","Date","now","Math","random","toString","substr","updateQuantity","newQuantity","removeFromCart","map","filter","clearCart","updateSpecialInstructions","instructions","getCartItem","find","isInCart","menuItemId","some","getItemQuantity","reduce","total","cartTotal","cartItemCount","cartSubtotal","estimatedPrepTime","length","maxPrepTime","max","bufferTime","min","cartItemsByCategory","grouped","acc","push","validateCart","checkAvailabilityFn","valid","unavailableItems","menuItemIds","Set","availability","allAvailable","includes","message","prepareOrderData","tableNumber","additionalData","table_number","session_id","order_items","menu_item_id","special_instructions","total_amount","estimated_prep_time","status"],"sources":["C:/Users/baij/Desktop/Work/Business/restuarant/customer/src/hooks/useCart.js"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\n\nconst CART_STORAGE_KEY = 'restaurant_cart';\n\nconst useCart = (sessionId) => {\n  const [cart, setCart] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedCart = localStorage.getItem(`${CART_STORAGE_KEY}_${sessionId}`);\n      if (savedCart) {\n        const parsedCart = JSON.parse(savedCart);\n        setCart(parsedCart);\n      }\n    } catch (error) {\n      console.error('Error loading cart from localStorage:', error);\n    }\n  }, [sessionId]);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(`${CART_STORAGE_KEY}_${sessionId}`, JSON.stringify(cart));\n    } catch (error) {\n      console.error('Error saving cart to localStorage:', error);\n    }\n  }, [cart, sessionId]);\n\n  // Add item to cart\n  const addToCart = useCallback((menuItem, quantity = 1, specialInstructions = '') => {\n    setCart(prevCart => {\n      const existingItemIndex = prevCart.findIndex(\n        item => item.id === menuItem.id && item.specialInstructions === specialInstructions\n      );\n\n      if (existingItemIndex >= 0) {\n        // Update existing item quantity\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + quantity\n        };\n        return updatedCart;\n      } else {\n        // Add new item\n        return [...prevCart, {\n          id: menuItem.id,\n          name: menuItem.name,\n          price: menuItem.price,\n          category: menuItem.category,\n          image_url: menuItem.image_url,\n          preparation_time: menuItem.preparation_time,\n          quantity,\n          specialInstructions,\n          cartId: `${menuItem.id}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n        }];\n      }\n    });\n  }, []);\n\n  // Update item quantity\n  const updateQuantity = useCallback((cartId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(cartId);\n      return;\n    }\n\n    setCart(prevCart =>\n      prevCart.map(item =>\n        item.cartId === cartId\n          ? { ...item, quantity: newQuantity }\n          : item\n      )\n    );\n  }, []);\n\n  // Remove item from cart\n  const removeFromCart = useCallback((cartId) => {\n    setCart(prevCart => prevCart.filter(item => item.cartId !== cartId));\n  }, []);\n\n  // Clear entire cart\n  const clearCart = useCallback(() => {\n    setCart([]);\n  }, []);\n\n  // Update special instructions for cart item\n  const updateSpecialInstructions = useCallback((cartId, instructions) => {\n    setCart(prevCart =>\n      prevCart.map(item =>\n        item.cartId === cartId\n          ? { ...item, specialInstructions: instructions }\n          : item\n      )\n    );\n  }, []);\n\n  // Get item from cart by cartId\n  const getCartItem = useCallback((cartId) => {\n    return cart.find(item => item.cartId === cartId);\n  }, [cart]);\n\n  // Check if item is in cart\n  const isInCart = useCallback((menuItemId) => {\n    return cart.some(item => item.id === menuItemId);\n  }, [cart]);\n\n  // Get total quantity for a specific menu item\n  const getItemQuantity = useCallback((menuItemId) => {\n    return cart\n      .filter(item => item.id === menuItemId)\n      .reduce((total, item) => total + item.quantity, 0);\n  }, [cart]);\n\n  // Calculated values with memoization\n  const cartTotal = useMemo(() => {\n    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);\n  }, [cart]);\n\n  const cartItemCount = useMemo(() => {\n    return cart.reduce((total, item) => total + item.quantity, 0);\n  }, [cart]);\n\n  const cartSubtotal = useMemo(() => {\n    return cartTotal; // Same as total for now, but can be different if we add taxes/fees\n  }, [cartTotal]);\n\n  const estimatedPrepTime = useMemo(() => {\n    if (cart.length === 0) return 0;\n    \n    // Calculate max prep time (items can be prepared in parallel)\n    const maxPrepTime = Math.max(...cart.map(item => item.preparation_time || 15));\n    \n    // Add buffer time based on cart size\n    const bufferTime = Math.min(cart.length * 2, 10);\n    \n    return maxPrepTime + bufferTime;\n  }, [cart]);\n\n  // Group cart items by category for display\n  const cartItemsByCategory = useMemo(() => {\n    const grouped = cart.reduce((acc, item) => {\n      const category = item.category || 'other';\n      if (!acc[category]) {\n        acc[category] = [];\n      }\n      acc[category].push(item);\n      return acc;\n    }, {});\n\n    return grouped;\n  }, [cart]);\n\n  // Validate cart items (check if all items are still available)\n  const validateCart = useCallback(async (checkAvailabilityFn) => {\n    if (cart.length === 0) return { valid: true, unavailableItems: [] };\n\n    try {\n      setIsLoading(true);\n      const menuItemIds = [...new Set(cart.map(item => item.id))];\n      const availability = await checkAvailabilityFn(menuItemIds);\n      \n      if (!availability.allAvailable) {\n        const unavailableItems = cart.filter(item => \n          availability.unavailableItems.includes(item.id)\n        );\n        \n        // Remove unavailable items from cart\n        setCart(prevCart => \n          prevCart.filter(item => !availability.unavailableItems.includes(item.id))\n        );\n        \n        return { valid: false, unavailableItems };\n      }\n      \n      return { valid: true, unavailableItems: [] };\n    } catch (error) {\n      console.error('Error validating cart:', error);\n      return { valid: false, error: error.message };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [cart]);\n\n  // Prepare order data for submission\n  const prepareOrderData = useCallback((tableNumber, sessionId, additionalData = {}) => {\n    return {\n      table_number: tableNumber,\n      session_id: sessionId,\n      order_items: cart.map(item => ({\n        menu_item_id: item.id,\n        name: item.name,\n        price: item.price,\n        quantity: item.quantity,\n        special_instructions: item.specialInstructions || ''\n      })),\n      total_amount: cartTotal,\n      estimated_prep_time: estimatedPrepTime,\n      status: 'pending',\n      ...additionalData\n    };\n  }, [cart, cartTotal, estimatedPrepTime]);\n\n  return {\n    // State\n    cart,\n    isLoading,\n    \n    // Actions\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    updateSpecialInstructions,\n    \n    // Getters\n    getCartItem,\n    isInCart,\n    getItemQuantity,\n    \n    // Calculated values\n    cartTotal,\n    cartItemCount,\n    cartSubtotal,\n    estimatedPrepTime,\n    cartItemsByCategory,\n    \n    // Utilities\n    validateCart,\n    prepareOrderData\n  };\n};\n\nexport default useCart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}