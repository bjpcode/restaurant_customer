{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://your-lambda-api.amazonaws.com';\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      return await response.text();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n  async get(endpoint, params = {}) {\n    const searchParams = new URLSearchParams(params);\n    const url = searchParams.toString() ? `${endpoint}?${searchParams}` : endpoint;\n    return this.request(url);\n  }\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n\n  // Menu endpoints\n  async fetchMenu(category = null) {\n    const params = category ? {\n      category\n    } : {};\n    return this.get('/menu', params);\n  }\n  async getMenuItem(id) {\n    return this.get(`/menu/${id}`);\n  }\n  async checkMenuAvailability(itemIds) {\n    return this.post('/menu/check-availability', {\n      itemIds\n    });\n  }\n\n  // Order endpoints\n  async submitOrder(orderData) {\n    return this.post('/orders', orderData);\n  }\n  async getOrder(orderId) {\n    return this.get(`/orders/${orderId}`);\n  }\n  async getOrdersBySession(sessionId) {\n    return this.get('/orders', {\n      sessionId\n    });\n  }\n  async updateOrderStatus(orderId, status) {\n    return this.put(`/orders/${orderId}/status`, {\n      status\n    });\n  }\n  async cancelOrder(orderId) {\n    return this.delete(`/orders/${orderId}`);\n  }\n\n  // Table endpoints\n  async validateTable(tableNumber) {\n    return this.get(`/tables/${tableNumber}/validate`);\n  }\n\n  // Analytics endpoints (optional)\n  async getOrderStats(sessionId) {\n    return this.get('/analytics/orders', {\n      sessionId\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create singleton instance\nconst apiService = new ApiService();\n\n// Export individual methods for convenience\nexport const {\n  fetchMenu,\n  getMenuItem,\n  checkMenuAvailability,\n  submitOrder,\n  getOrder,\n  getOrdersBySession,\n  updateOrderStatus,\n  cancelOrder,\n  validateTable,\n  getOrderStats,\n  healthCheck\n} = apiService;\nexport default apiService;\n\n// Retry utility for failed requests\nexport const withRetry = async (fn, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      if (i < maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));\n      }\n    }\n  }\n  throw lastError;\n};\n\n// Cache utility for menu data\nclass SimpleCache {\n  constructor(ttl = 300000) {\n    // 5 minutes default TTL\n    this.cache = new Map();\n    this.ttl = ttl;\n  }\n  set(key, value) {\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now()\n    });\n  }\n  get(key) {\n    const item = this.cache.get(key);\n    if (!item) return null;\n    if (Date.now() - item.timestamp > this.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n    return item.value;\n  }\n  clear() {\n    this.cache.clear();\n  }\n}\nexport const menuCache = new SimpleCache();\n\n// Network status utility\nexport const isOnline = () => {\n  return navigator.onLine;\n};\nexport const onNetworkChange = callback => {\n  const handleOnline = () => callback(true);\n  const handleOffline = () => callback(false);\n  window.addEventListener('online', handleOnline);\n  window.addEventListener('offline', handleOffline);\n  return () => {\n    window.removeEventListener('online', handleOnline);\n    window.removeEventListener('offline', handleOffline);\n  };\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","ApiService","constructor","baseUrl","request","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","Error","message","status","contentType","get","includes","text","error","console","params","searchParams","URLSearchParams","toString","post","data","method","body","JSON","stringify","put","delete","fetchMenu","category","getMenuItem","id","checkMenuAvailability","itemIds","submitOrder","orderData","getOrder","orderId","getOrdersBySession","sessionId","updateOrderStatus","cancelOrder","validateTable","tableNumber","getOrderStats","healthCheck","apiService","withRetry","fn","maxRetries","delay","lastError","i","Promise","resolve","setTimeout","Math","pow","SimpleCache","ttl","cache","Map","set","key","value","timestamp","Date","now","item","clear","menuCache","isOnline","navigator","onLine","onNetworkChange","callback","handleOnline","handleOffline","window","addEventListener","removeEventListener"],"sources":["C:/Users/baij/Desktop/Work/Business/restuarant/customer/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://your-lambda-api.amazonaws.com';\n\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      \n      return await response.text();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  async get(endpoint, params = {}) {\n    const searchParams = new URLSearchParams(params);\n    const url = searchParams.toString() ? `${endpoint}?${searchParams}` : endpoint;\n    return this.request(url);\n  }\n\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE',\n    });\n  }\n\n  // Menu endpoints\n  async fetchMenu(category = null) {\n    const params = category ? { category } : {};\n    return this.get('/menu', params);\n  }\n\n  async getMenuItem(id) {\n    return this.get(`/menu/${id}`);\n  }\n\n  async checkMenuAvailability(itemIds) {\n    return this.post('/menu/check-availability', { itemIds });\n  }\n\n  // Order endpoints\n  async submitOrder(orderData) {\n    return this.post('/orders', orderData);\n  }\n\n  async getOrder(orderId) {\n    return this.get(`/orders/${orderId}`);\n  }\n\n  async getOrdersBySession(sessionId) {\n    return this.get('/orders', { sessionId });\n  }\n\n  async updateOrderStatus(orderId, status) {\n    return this.put(`/orders/${orderId}/status`, { status });\n  }\n\n  async cancelOrder(orderId) {\n    return this.delete(`/orders/${orderId}`);\n  }\n\n  // Table endpoints\n  async validateTable(tableNumber) {\n    return this.get(`/tables/${tableNumber}/validate`);\n  }\n\n  // Analytics endpoints (optional)\n  async getOrderStats(sessionId) {\n    return this.get('/analytics/orders', { sessionId });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create singleton instance\nconst apiService = new ApiService();\n\n// Export individual methods for convenience\nexport const {\n  fetchMenu,\n  getMenuItem,\n  checkMenuAvailability,\n  submitOrder,\n  getOrder,\n  getOrdersBySession,\n  updateOrderStatus,\n  cancelOrder,\n  validateTable,\n  getOrderStats,\n  healthCheck\n} = apiService;\n\nexport default apiService;\n\n// Retry utility for failed requests\nexport const withRetry = async (fn, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      if (i < maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));\n      }\n    }\n  }\n  \n  throw lastError;\n};\n\n// Cache utility for menu data\nclass SimpleCache {\n  constructor(ttl = 300000) { // 5 minutes default TTL\n    this.cache = new Map();\n    this.ttl = ttl;\n  }\n\n  set(key, value) {\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now(),\n    });\n  }\n\n  get(key) {\n    const item = this.cache.get(key);\n    if (!item) return null;\n\n    if (Date.now() - item.timestamp > this.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return item.value;\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}\n\nexport const menuCache = new SimpleCache();\n\n// Network status utility\nexport const isOnline = () => {\n  return navigator.onLine;\n};\n\nexport const onNetworkChange = (callback) => {\n  const handleOnline = () => callback(true);\n  const handleOffline = () => callback(false);\n\n  window.addEventListener('online', handleOnline);\n  window.addEventListener('offline', handleOffline);\n\n  return () => {\n    window.removeEventListener('online', handleOnline);\n    window.removeEventListener('offline', handleOffline);\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}